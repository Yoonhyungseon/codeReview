Intuition
나선형으로 순회하기 위한 규칙을 먼저 찾아야 합니다. 이동시 dx, dy 테크닉을 활용하면 그 다음으로 이동해야 할 위치를 쉽게 계산할 수 있습니다.

Algorithm
정가운데부터 시작하여 나선형으로 순회하기 위해서는 방향이 변해야하는 순서와, 각 방향에 대해 몇 칸씩 이동해야 하는지에 대한 규칙을 먼저 찾아야 합니다.

방향은 오른쪽, 위, 왼쪽, 아래 순서로 변한다는 것을 알 수 있고, 각 방향에 대해서는 처음 1씩 이동하다가 방향이 왼쪽 혹은 오른쪽으로 바뀌게 되었을 때 동일한 방향에 대해 이동하게 되는 거리가 1씩 늘어나게 됨을 관찰을 통해 찾아낼 수 있습니다. 단, 마지막 끝나는 부분에서는 그렇지 않음을 꼭 유의해야 합니다. 끝나는 경우에 대한 처리는 도는 것을 계속 반복하다가 최종적으로 격자를 벗어나게 되는 경우를 잡으면 됩니다.
images/2021-02-16-05-11-26.png


방향을 오른쪽, 위, 왼쪽, 아래 순서로 변하게 하기 위해 해당 방향 순서대로 dx, dy 값을 설정해야 하며, dir값이 3일때 그 다음 방향은 0이 나와야 하므로 현재 dir 값에 1을 더한 뒤 4로 나눈 나머지를 그 다음 dir 값으로 설정하면 그 다음 방향을 쉽게 계산해줄 수 있습니다.
images/2021-02-16-05-11-39.png


# 변수 선언 및 입력:
n = int(input())
grid = [
    [0 for _ in range(n)]
    for _ in range(n)
]

# 시작 위치와 방향, 
# 해당 방향으로 이동할 횟수를 설정합니다.
curr_x, curr_y = n // 2, n // 2
move_dir, move_num = 0, 1


def in_range(x, y):
    return 0 <= x and x < n and 0 <= y and y < n


# 한 칸 움직이며 청소를 진행합니다.
def move():
    global curr_x, curr_y
    
    # 문제에서 원하는 진행 순서대로 
    # 오른쪽 위 왼쪽 아래 방향이 되도록 정의합니다.
    dxs, dys = [0, -1, 0, 1], [1, 0, -1, 0]
    curr_x, curr_y = curr_x + dxs[move_dir], curr_y + dys[move_dir]


def end():
    return not in_range(curr_x, curr_y)


# 시작 위치와 방향, 
# 해당 방향으로 이동할 횟수를 설정합니다. 
cnt = 1

while not end():
    # move_num 만큼 이동합니다.
    for _ in range(move_num):
        grid[curr_x][curr_y] = cnt
        cnt += 1
        
        move()
        
        # 이동하는 도중 격자를 벗어나게 되면,
        # 움직이는 것을 종료합니다.
        if end():
            break
    
    # 방향을 바꿉니다.
    move_dir = (move_dir + 1) % 4
    # 만약 현재 방향이 왼쪽 혹은 오른쪽이 된 경우에는
    # 특정 방향으로 움직여야 할 횟수를 1 증가시킵니다.
    if move_dir == 0 or move_dir == 2:
        move_num += 1

# 출력:
for i in range(n):
    for j in range(n):
        print(grid[i][j], end=" ")
    print()


#include <iostream>

#define DIR_NUM 4
#define MAX_N 499

using namespace std;

// 전역 변수 선언:
int n;

int curr_x, curr_y;
int move_dir, move_num;

int grid[MAX_N][MAX_N];

bool InRange(int x, int y) {
    return 0 <= x && x < n && 0 <= y && y < n;
}

// 한 칸 움직입니다.
void Move() {
    // 문제에서 원하는 진행 순서대로 
    // 오른쪽 위 왼쪽 아래 방향이 되도록 정의합니다.
    int dx[DIR_NUM] = {0, -1, 0, 1};
    int dy[DIR_NUM] = {1, 0, -1, 0};

    curr_x += dx[move_dir]; curr_y += dy[move_dir];
}

bool End() {
    return !InRange(curr_x, curr_y);
}

int main() {
    // 입력:
    cin >> n;
    
    // 시작 위치와 방향, 
    // 해당 방향으로 이동할 횟수를 설정합니다. 
    curr_x = n / 2; curr_y = n / 2;
    move_dir = 0; move_num = 1;
    
    int cnt = 1;

    while(!End()) {
        // move_num 만큼 이동합니다.
        for(int i = 0; i < move_num; i++) {
            grid[curr_x][curr_y] = cnt++;
            Move();
            
            // 이동하는 도중 격자를 벗어나게 되면,
            // 움직이는 것을 종료합니다.
            if(End())
                break;
        }
        
        // 방향을 바꿉니다.
        move_dir = (move_dir + 1) % 4;
        // 만약 현재 방향이 왼쪽 혹은 오른쪽이 된 경우에는
        // 특정 방향으로 움직여야 할 횟수를 1 증가시킵니다.
        if(move_dir == 0 || move_dir == 2)
            move_num++;
    }
    
    // 출력:
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++)
            cout << grid[i][j] << " ";
        cout << endl;
    }

    return 0;
}


Complexity Analysis
Time Complexity : O(N^2)

Memory Complexity : O(N^2)

