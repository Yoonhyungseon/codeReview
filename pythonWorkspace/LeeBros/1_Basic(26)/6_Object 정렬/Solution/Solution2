Intuition
입력으로 받은 숫자와 해당 숫자의 위치를 동시에 활용하기 위해 별도의 클래스를 정의 해줍니다. 또한 동일한 원소의 경우 앞선 인덱스의 숫자가 더 앞에 있어야 하는 조건을 충족시키기 위하여 Custom Comparator를 활용합니다.

Algorithm
주어진 문제를 풀기 위해서는 수열을 정렬한 뒤에 각 원소의 원래 위치 정보를 알아야 합니다. 이를 위해 숫자와 위치 정보를 함께 저장할 수 있는 클래스를 선언하여 활용합니다. 아래의 그림과 같이 각 숫자의 원래 위치를 인덱스에 저장한 뒤에 오름차순으로 정렬해줍니다.
images/2021-02-16-05-29-38.png


이 때 문제에서 정렬을 했을 때 먼저 입력으로 주어진 원소가 더 앞에 와야한다는 제약 조건을 만족하기 위해서 Custom Comparator를 사용하여 숫자가 같을 경우 인덱스를 비교하도록 해줍니다.

위와 같이 정렬을 해준 뒤, 각각의 위치에 있던 원소가 어디로 이동한 것인지 저장하기 위한 별도의 배열을 활용하여 아래의 그림과 같이 저장해줍니다.
images/2021-02-16-05-30-18.png

# 클래스 선언
class Number:
    def __init__(self, number, index):
        self.number, self.index = number, index


# 변수 선언 및 입력
n = int(input())
given_inputs = list(map(int, input().split()))
numbers = [
    Number(num, i)
    for i, num in enumerate(given_inputs)
]
answer = [
    0 for _ in range(n)
]

# Custom Comparator를 활용한 정렬
numbers.sort(key = lambda x: (x.number, x.index))

# 정렬된 숫자들의 원래 인덱스를 활용한 정답 배열 저장
for i, number in enumerate(numbers):
    answer[number.index] = i + 1 # 인덱스 보정

# 출력
for i in range(n):
    print(answer[i], end = ' ')



#include <iostream>
#include <vector>
#include <algorithm>

#define MAX_NUM 1000

using namespace std;

// 클래스 선언: 
class Number{
    public:
        int number;
        int index;
        Number(int number, int index) {
            this->number = number;
            this->index = index;
        }
};

// Custom Comparator
bool Cmp(const Number &a, const Number &b) {
    if(a.number != b.number)
        return a.number < b.number;
    return a.index < b.index;
}

int main() {
    // 변수 선언:
    int n, num_cache;
    int answer[MAX_NUM];
    vector<Number> numbers;

    // 입력:
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> num_cache;
        numbers.push_back(Number(num_cache, i));
    }

    // Custom Comparator를 활용한 정렬:
    sort(numbers.begin(), numbers.end(), Cmp);

    // 정렬된 숫자들의 원래 인덱스를 활용한 정답 배열 저장:
    for(int i = 0; i < n; i++) 
        answer[numbers[i].index] = i + 1; // 인덱스 보정

    // 출력:
    for(int i = 0; i < n; i++){
        cout << answer[i] << " ";
    }

    return 0;
}



Complexity Analysis
Time Complexity : O(NlgN)

Memory Complexity : O(N)



Intuition
각 언어에 미리 정의된 두 객체를 하나의 객체처럼 묶어서 사용할 수 있는 자료형을 사용합니다.

Algorithm
전체적인 알고리즘 자체는 solution 1과 동일합니다. C++ 에서는 pair를, Python 에서는 tuple을 활용하면 별도의 Custom Comparator 없이 정렬을 할 수 있습니다. 이는 각 언어에서 해당 자료형을 정렬할 때 첫 번째 객체를 우선적으로 비교하고, 만약 같은 경우 두 번째 객체를 비교하여 정렬해주기 때문입니다. 이러한 자료형을 사용하면 보다 간결한 코드를 짤 수 있습니다.

# 변수 선언 및 입력
n = int(input())
given_inputs = list(map(int, input().split()))
numbers = [
    (num, i)
    for i, num in enumerate(given_inputs)
]
answer = [
    0 for _ in range(n)
]

# Custom Comparator를 활용한 정렬
numbers.sort(key = lambda x: (x[0], x[1]))

# 정렬된 숫자들의 원래 인덱스를 활용한 정답 배열 저장
for i, (_, index) in enumerate(numbers):
    answer[index] = i + 1 # 인덱스 보정

# 출력
for i in range(n):
    print(answer[i], end = ' ')


#include <iostream>
#include <vector>
#include <algorithm>

#define MAX_NUM 1000

using namespace std;

int main() {
    // 변수 선언:
    int n, num_cache;
    int answer[MAX_NUM];
    vector<pair<int, int> > numbers;

    // 입력:
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> num_cache;
        numbers.push_back(make_pair(num_cache, i));
    }

    // 정렬:
    sort(numbers.begin(), numbers.end());

    // 정렬된 숫자들의 원래 인덱스를 활용한 정답 배열 저장:
    for(int i = 0; i < n; i++) 
        answer[numbers[i].second] = i + 1; // 인덱스 보정

    // 출력:
    for(int i = 0; i < n; i++){
        cout << answer[i] << " ";
    }

    return 0;
}

Complexity Analysis
Time Complexity : O(NlgN)

Memory Complexity : O(N)