Intuition
기존의 최댓값을 찾는 방법과 동일하게 최댓값(max)을 -1로 초기화한 후 배열을 순회하며 최댓값을 갱신합니다. 단, 갱신하기전에 이 숫자가 유일할때만 갱신하는 조건을 추가합니다.

Algorithm
최댓값의 후보(max)를 -1로 초기화한 후 배열을 순회합니다. 순회 중 해당 숫자가 max보다 크면 이 값을 갱신할 수 있는지 체크하기 위해 이 숫자의 등장 빈도(count)를 셉니다. 이 숫자가 주어진 배열에서 유일하면 (count==1) max값을 갱신합니다.

# 변수 선언 및 입력:

n = int(input())
nums = list(map(int, input().split()))

# 최댓값 찾기
max_num = -1

for curr_num in nums:
    # 최대가 될 수 있는 후보입니다.
    if max_num < curr_num:
        # 갱신할 수 있는지 확인하기 위해 이 숫자의 등장 빈도를 셉니다.
        count = 0
        for elem in nums:
            if elem == curr_num:
                count += 1
        
        # 이 숫자가 배열에서 유일할때만 갱신합니다.
        if count == 1:
            max_num = curr_num

print(max_num)



#include <iostream>

using namespace std;

#define MAX_N 1000 // 입력값 N의 최대값

int main() {
    int n, nums[MAX_N];

    // 입력
    cin >> n;
    for(int i = 0; i < n; i++)
        cin >> nums[i];

    // 최댓값 찾기
    int max = -1;
    for(int i = 0; i < n; i++) {
        int curr_num = nums[i];
        // 최대가 될 수 있는 후보입니다.
        if(max < curr_num) {
            // 갱신할 수 있는지 확인하기 위해 이 숫자의 등장 빈도를 셉니다.
            int count = 0;
            for(int j = 0; j < n; j++) {
                if(nums[j] == curr_num) {
                    count++;
                }
            }
            // 이 숫자가 배열에서 유일할때만 갱신합니다.
            if(count == 1) {
                max = curr_num;
            }
        }
    }

    cout << max;
    return 0;
}




Intuition
주어지는 숫자들의 범위가 주어져있으므로 해당 범위내에 있는 모든 숫자의 등장 빈도를 기록하는 배열(count)을 선언하고 0으로 초기화 합니다. 이 배열의 어떤 값 count[num]은 num이라는 숫자가 등장한 빈도를 나타냅니다. 이를 이용하면 유일한 숫자인지를 쉽게 판단할 수 있습니다.

Algorithm
원소의 최대값 크기(M)의 빈도 배열(count)을 선언하고 0으로 초기화 합니다.

step 1) N개의 숫자를 순회하며 각 숫자의 등장을 count 배열에 기록합니다.

step 2) 가장 큰 숫자부터 그 수의 등장 빈도를 확인하고, 1이면 그 값을 반환합니다. 그러한 값이 없다면 -1을 반환합니다.

MAX_NUM = 1000

# 변수 선언 및 입력:
n = int(input())
nums = list(map(int, input().split()))

# count 배열을 0으로 초기화
# 편의상 배열의 index가 실제 숫자를 나타내도록 하기 위해
# MAX_NUM + 1개의 공간을 갖는 배열로 선언합니다.
count = [0 for _ in range(MAX_NUM + 1)]


# step1. count 배열에 수의 등장 빈도를 셉니다.
for elem in nums:
    count[elem] += 1

# step2. 큰 수부터 체크하며 한 번 등장한 최대의 값을 찾습니다.
answer = -1
for max_candidate in range(MAX_NUM, -1, -1):
    if count[max_candidate] == 1:
        answer = max_candidate
        break

print(answer)


#include <iostream>

using namespace std;

#define MAX_N 1000 // 입력값 N의 최댓값
#define MAX_NUM 1000 // 원소의 최댓값

int main() {
    int n, nums[MAX_N];
    // count 배열을 0으로 초기화
    // 편의상 배열의 index가 실제 숫자를 나타내도록 하기 위해
    // MAX_NUM+1개의 공간을 갖는 배열로 선언합니다.
    int count[MAX_NUM + 1] = {};

    // 입력
    cin >> n;
    for(int i = 0; i < n; i++)
        cin >> nums[i];

    // step1. count 배열에 수의 등장 빈도를 셉니다.
    for(int i = 0; i < n; i++)
        count[nums[i]]++;

    // step2. 큰 수부터 체크하며 한 번 등장한 최대의 값을 찾습니다.
    int answer = -1;
    for(int max_candidate = MAX_NUM; max_candidate >= 0; max_candidate--) {
        if(count[max_candidate] == 1) {
            answer = max_candidate;
            break;
        }
    }

    cout << answer;
    return 0;
}

Complexity Analysis
Time Complexity : O(N + M)

Memory Complexity : O(N + M)

Complexity Analysis
Time Complexity : O(N^2)

Memory Complexity : O(N)