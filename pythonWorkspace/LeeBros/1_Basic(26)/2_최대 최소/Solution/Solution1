Intuition
반복문을 사용하여 먼저 최솟값을 구합니다. 그 이후에 한번 더 배열을 순회하며 해당 최솟값이 몇 개 있는지를 계산합니다.

Algorithm
입력으로 주어진 N개의 숫자가 순서대로 A[0]~A[N-1]의 배열에 담겨 있고, 최솟값을 담을 변수를 min이라 합시다. 배열을 쭉 순회하여 이 min값을 먼저 계산합니다.

images/2021-02-16-04-35-58.png

그 다음 배열을 다시 순회하며 min값과 일치하는 개수를 셉니다.

images/2021-02-16-04-36-03.png


# 변수 선언 및 입력
n = int(input())
arr = list(map(int, input().split()))

# 초기값을 적습니다. 최소가 될 첫 번째 후보입니다.
min_val = arr[0]
# 최솟값의 개수를 저장할 변수입니다.
cnt = 0

# 나머지 원소들을 보며 최솟값을 갱신합니다.
for i in range(1, n):
    if min_val > arr[i]:  # 지금까지 나왔던 값들 보다 더 작은 값이라면
        min_val = arr[i]; # 최솟값이 되므로 그 값을 갱신합니다.

# min과 일치하는 원소의 개수를 셉니다.
for i in range(n):
    if arr[i] == min_val:
        cnt += 1

# 출력
print(min_val, cnt)


#include <iostream>

using namespace std;

int main() {
    // 변수 선언
    int A[100], n;

    // 입력:
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> A[i];
    
    // 초기값을 적습니다. 최소가 될 첫 번째 후보입니다.
    int min = A[0];
	
	// 최솟값의 개수를 저장할 변수입니다.
	int cnt = 0;

    // 나머지 원소들을 보며 최솟값을 갱신합니다.
    for (int i = 1; i < n; i++){
    	if (min > A[i]){ // 지금까지 나왔던 값들 보다 더 작은 값이라면
            min = A[i];  // 최솟값이 되므로 그 값을 갱신합니다.
    	} 
    }
    
    // min과 일치하는 원소의 개수를 셉니다.
    for (int i = 0; i < n; i++) {
        if (A[i] == min) {
            cnt++;
        }
    }

    // 출력:
    cout << min << " " << cnt;
    return 0;
}


Complexity Analysis
Time Complexity : O(N)

Memory Complexity : O(N)





Intuition
반복문을 사용하여 배열을 순회하며, 현재까지 나온 최솟값이 무엇인지와 그 최솟값이 총 몇 번 나왔는지를 계속 갱신해줍니다.

Algorithm
입력으로 주어진 N개의 숫자가 순서대로 A[0]~A[N-1]의 배열에 담겨 있고, 최솟값을 담을 변수를 min, 최솟값 원소의 개수를 담을 변수를 cnt라고 해봅시다.

이 때 최솟값은 다음과 같은 순서로 구해볼 수 있습니다.

step 1) A[0]을 min에 갱신합니다.
step 2) 앞선 step에서 구한 min과 A[1] 중에 더 작은 수를 구한 뒤 min에 갱신합니다.
step 3) step2을 A[2] … A[N-1]에 대하여 반복합니다.
위의 과정에서 cnt를 다음과 같이 갱신해줍니다.

case 1) min이 새로운 값으로 갱신되는 경우 cnt를 1로 초기화 해줍니다.
case 2) 원소의 값이 min과 동일한 경우 cnt를 1 증가시켜줍니다.

images/2021-02-16-04-37-18.png

# 변수 선언 및 입력
n = int(input())
arr = list(map(int, input().split()))

# 초기값을 적습니다. 최소가 될 첫 번째 후보입니다.
min_val = arr[0]
cnt = 1 # Case 1

# 나머지 원소들을 보며 답을 갱신합니다.
for i in range(1, n):
	# Case 1
    if min_val > arr[i]:  # 지금까지 나왔던 값들 보다 더 작은 값이라면
        min_val = arr[i]; # 최초의 최솟값이 되므로 그 값을 갱신하고
        cnt = 1           # Count를 1로 초기화합니다.
	# Case 2
    elif min_val == arr[i]:   # 지금까지의 최소와 같다면
        cnt += 1          # Count를 1 증가시켜줍니다.

# 출력
print(min_val, cnt)


#include <iostream>

using namespace std;

int main() {
    // 변수 선언
    int A[100], n, min, cnt;

    // 입력:
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> A[i];
    
    // 초기값을 적습니다. 최소가 될 첫 번째 후보입니다.
    min = A[0];
    cnt = 1; // Case 1

    // 나머지 원소들을 보며 답을 갱신합니다.
    for (int i = 1; i < n; i++){
		// Case 1
    	if (min > A[i]){ // 지금까지 나왔던 값들 보다 더 작은 값이라면
            min = A[i];  // 최초의 최솟값이 되므로 그 값을 갱신하고
            cnt = 1;     // Count를 1로 초기화합니다.
    	} 
		// Case 2
        else if (min == A[i]){ // 지금까지의 최소와 같다면
            cnt++;             // Count를 1 증가해줍니다.
        }
    }

    // 출력:
    cout << min << " " << cnt;
    return 0;
}


Complexity Analysis
Time Complexity : O(N)

Memory Complexity : O(N)