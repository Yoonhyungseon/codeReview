Intuition
최대를 구하는 과정을 계속 반복합니다.

Algorithm
첫 번째로 구해진 최대 원소의 위치가 max_idx1이라 한다면, 두 번째 최대 원소의 경우에는 1번째 원소부터 max_idx1번째 원소 전까지 중에 최댓값을 구하면 알 수 있습니다. 이 과정을 계속 반복하면 됩니다.

# 변수 선언 및 입력
n = int(input())
a = list(map(int, input().split()))

prev_max_idx = n

# 첫 번째 원소가 최대가 되기 전까지 계속 반복합니다.
while True:
    # 최대값 후보의 시작은 항상 첫 번째 원소입니다.
    max_idx = 0

    # 두 번째 원소부터 바로 직전 최대로 뽑힌
    # 원소 전까지 보면서 그 중 최대 index를 갱신합니다.
    # index를 오름차순으로 보기 때문에
    # 최댓값이 여러개인 경우 가장 왼쪽에 있는
    # 원소가 뽑히게 됩니다.
    for i in range(1, prev_max_idx):
        if a[i] > a[max_idx]:
            max_idx = i

    print(max_idx + 1, end=" ")

    # 최대인 원소가 첫 번째 원소라면 종료합니다.
    if max_idx == 0:
        break

    #바로 직전 최대 index를 갱신해줍니다.
    prev_max_idx = max_idx



#include <iostream>

#define MAX_N 1000

using namespace std;

int main() {
	int n;
	int a[MAX_N];
	
	cin >> n;	
	
	for(int i = 0; i < n; i++)
		cin >> a[i];
	
	int prev_max_idx = n;
    
    // 첫 번째 원소가 최대가 되기 전까지 계속 반복합니다.
	while(true) {
        // 최대값 후보의 시작은 항상 첫 번째 원소입니다.
		int max_idx = 0;
        
        // 두 번째 원소부터 바로 직전 최대로 뽑힌
        // 원소 전까지 보면서 그 중 최대 index를 갱신합니다.
        // index를 오름차순으로 보기 때문에
        // 최댓값이 여러개인 경우 가장 왼쪽에 있는
        // 원소가 뽑히게 됩니다.
		for(int i = 1; i < prev_max_idx; i++)
			if(a[i] > a[max_idx])
				max_idx = i;
		
		cout << max_idx + 1 << " ";
		
        // 최대인 원소가 첫 번째 원소라면 종료합니다.
		if(max_idx == 0)
			break;
		
        // 바로 직전 최대 index를 갱신해줍니다.
		prev_max_idx = max_idx;
	}
	
	return 0;
}

Complexity Analysis
Time Complexity : O(N^2)

Memory Complexity : O(N)


Intuition
답으로 출력되는 원소들을 index가 증가하는 순서대로 보면, 오름차순으로 증가한다는 것을 알 수 있습니다. 따라서 관찰을 통해 입력으로 받은 원소들을 순서대로 보면서 지금까지 골라진 마지막 원소보다 더 큰 경우에만 답에 추가하는 식으로 진행이 가능한 것을 알 수 있습니다.

Algorithm
전체에서 최댓값을 구하고, 그 다음 최댓값을 왼쪽에서 구하는 것을 반복하는 문제이므로 답으로 출력되는 원소들은 왼쪽에서부터 봤을 때 오름차순으로 증가한다는 것을 알 수 있습니다.

이때, 최댓값이 여러개인 경우 가장 왼쪽에 있는 원소를 고르게 되기 때문에 결국 이 문제에서 원하는 답은 왼쪽에서 오른쪽으로 쭉 진행하면서 지금까지 고른 답 중 가장 마지막 원소보다 더 커지는 순간에만 답에 포함시키는 식으로 진행해볼 수 있습니다. 따라서 이 방법의 시간복잡도는 O(N)이 됩니다.
images/2021-02-16-04-42-44.gif

# 변수 선언 및 입력:
n = int(input())
a = list(map(int, input().split()))
indices = list()

# 첫 번째 원소는 항상 답이 됩니다.
indices.append(0)

# 바로 직전에 답으로 추가한 원소보다
# 현재 원소가 더 큰 경우에만 답으로 추가합니다.
for i in range(1, n):
    last_idx = indices[-1]
    if a[i] > a[last_idx]:
        indices.append(i)

for idx in indices[::-1]:
    print(idx + 1, end=' ')



#include <iostream>
#include <vector>

#define MAX_N 1000

using namespace std;

int main() {
	int n;
	int a[MAX_N];
    
    vector<int> indices;
	
	cin >> n;	
	
	for(int i = 0; i < n; i++)
		cin >> a[i];
	
    // 첫 번째 원소는 항상 답이 됩니다.
	indices.push_back(0);
    
    // 바로 직전에 답으로 추가한 원소보다
    // 현재 원소가 더 큰 경우에만 답으로 추가합니다.
    for(int i = 1; i < n; i++) {
        int last_idx = indices.back();
        if(a[i] > a[last_idx])
            indices.push_back(i);
    }
    
    for(int i = (int) indices.size() - 1; i >= 0; i--) {
        int idx = indices[i];
        cout << idx + 1 << " ";
    }
	
	return 0;
}


Complexity Analysis
Time Complexity : O(N)

Memory Complexity : O(N)