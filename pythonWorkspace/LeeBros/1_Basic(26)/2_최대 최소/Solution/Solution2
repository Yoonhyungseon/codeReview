Intuition
배열을 순회하며 최댓값을 갖는 원소를 구한 뒤, 다시 한 번 순회할 때는 이미 구한 원소를 제외한 원소 중에 최댓값을 구합니다.

Algorithm
입력으로 주어진 N개의 숫자가 순서대로 A[0]~A[N-1]의 배열에 담겨 있고, 가장 큰 원소의 index를 담을 변수를 max1Index, 그리고 첫 번째와 두 번째에 순회할 때 가장 큰 원소를 담을 변수를 각각 max1, max2라고 해봅시다.

이 때 내림차순으로 정렬했을 때 첫 번째와 두 번째 원소는 다음과 같은 순서로 구할 수 있습니다.

step 1) 배열을 순회하며 최댓값을 max1에 갱신합니다. 이 때 해당 원소의 index를 max1Index에 함께 갱신해줍니다.
images/2021-02-16-04-38-05.png

step 2) 배열을 다시 순회하며 max1Index번째 위치를 제외한 원소들 중 최대값을 max2에 갱신합니다.
images/2021-02-16-04-38-15.png

이때, 앞선 step1에서는 max1의 초기값을 A[0]을 사용해주었지만, step2에서는 max1Index가 0일 수도 있기 때문에 max2 변수가 초기화 되었는지를 판별하기 위해 isInitialized 라는 변수를 사용합니다. max2를 구해주는 방법은 다음과 같습니다.
images/2021-02-16-04-38-19.png


case 1) i == max1Index인 경우 : 앞선 step에서 사용된 원소임으로 건너뜁니다.

case 2)isInitialized == false인 경우 : max2 변수가 초기화 되어 있지 않음으로 이를 갱신해주고, 초기화가 되었다는 의미로 isInitialized = true로 갱신해줍니다.

case 3) Ai > max2인 경우 : max2 = Ai로 갱신해줍니다.

이렇듯 isInitialized 라는 변수를 사용하게 되면 max1이 A[0]인 케이스에 대해서도 정상적으로 max2를 계산해줄 수 있습니다.
images/2021-02-16-04-38-24.png

# 변수 선언 및 입력
n = int(input())
arr = list(map(int, input().split()))

# Step 1: max1과 해당 index를 구합니다.
max1, max1_idx = arr[0], 0

for i in range(1, n):
    if arr[i] > max1:
        max1, max1_idx = arr[i], i # 최대 위치를 갱신합니다.

# Step 2: max1이 골라진 위치를 제외한 곳에서 최댓값을 구합니다.
is_initialized = False
for i in range(n):
    if i == max1_idx:
        # Case 1 : 1번에서 고른 케이스는 패스합니다.
        continue
    
    if not is_initialized:
        # Case 2: 아직 max2 값을 초기화 하지 못했다면
        #         현재 값으로 초기화 합니다.
        is_initialized, max2 = True, arr[i]
    elif arr[i] > max2:
        # Case 3: 지금까지 계산한 값보다 좋다면 갱신합니다.
        max2 = arr[i]

print(max1, max2)

#include <iostream>

using namespace std;

int main() {
    // 변수 선언: 
    int A[100], n, max1, max2, max1_idx;

    // 입력:
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> A[i];
        
    // Step 1: max1과 해당 index를 구합니다.
    max1 = A[0];
    max1_idx = 0;

    for (int i = 1; i < n; i++) {
        if (A[i] > max1){
            max1 = A[i];
            max1_idx = i; // 최대 위치를 갱신합니다.
        }
    }

    // Step 2: max1이 골라진 위치를 제외한 곳에서 최댓값을 구합니다.
    bool is_initialized = false;
    for (int i = 0; i < n; i++) {
        if (i == max1_idx) 
            continue; // Case 1 : 1번에서 고른 케이스는 패스합니다.

        if (is_initialized == false) {
            // Case 2: 아직 max2 값을 초기화 하지 못했다면
            //         현재 값으로 초기화 합니다.
            is_initialized = true;
            max2 = A[i];
        }
        else if (A[i] > max2) {
            // Case 3: 지금까지 계산한 값보다 좋다면 갱신합니다.
            max2 = A[i];
        }
    }

    // 출력: 
    cout << max1 << " " << max2;
    return 0;
}

Complexity Analysis
Time Complexity : O(N)

Memory Complexity : O(N)


Intuition
배열을 한 번만 순회하며 현재까지의 첫 번째 최대와 두 번째 최대 원소를 계속 갱신합니다.

Algorithm
입력으로 주어진 N개의 숫자가 순서대로 A[0]~A[N-1]의 배열에 담겨 있고, 현재까지의 가장 큰 원소를 담을 변수를 max1, 두 번째로 큰 원소를 담을 변수를 max2라고 해봅시다.

이 때 내림차순으로 정렬했을 때 첫 번째와 두 번째 원소는 다음과 같은 순서로 구할 수 있습니다.

step 1) A[0]와 A[1]중 큰 원소를 max1에, 나머지를 max2에 갱신합니다.

step 2) i >= 2 에 해당하는 남은 원소들을 순서대로 보면서 다음 규칙에 따라 max1, max2를 갱신해줍니다.

case 1) A[i] >= max1인 경우 : max1 = A[i], max2 = max1

case 2) max1 > A[i] > max2인 경우 : max2 = A[i]

images/2021-02-16-04-39-03.png

# 변수 선언 및 입력
n = int(input())
arr = list(map(int, input().split()))

# Step 1: 처음 2개의 원소 중 더 큰 값을 max1에
#                        더 작은 값을 max2에 넣습니다.
if arr[0] > arr[1]:
    max1, max2 = arr[0], arr[1]
else:
    max2, max1 = arr[0], arr[1]

# Step 2: 3번째 원소부터 보면서 max1과 max2를 갱신합니다.
for i in range(2, n):
    if arr[i] >= max1:
        # Case 1 : 지금까지 본 숫자들보다 좋다면
        #          max2, max1 모두 갱신해줍니다.
        max2, max1 = max1, arr[i]
    elif arr[i] > max2:
        # Case 2 : max2보다만 좋다면 max2를 갱신합니다.
        max2 = arr[i]

print(max1, max2)


#include <iostream>

using namespace std;

int main() {
    // 변수 선언: 
    int A[100], n, max1, max2;

    // 입력:
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> A[i];
        
    // Step 1: 처음 2개의 원소 중 더 큰 값을 max1에
    //                        더 작은 값을 max2에 넣습니다.
    if (A[0] > A[1]){
        max1 = A[0];
        max2 = A[1];
    }
    else{
        max1 = A[1];
        max2 = A[0];
    }
    
    // Step 2: 3번째 원소부터 보면서 max1과 max2를 갱신합니다.
    for (int i = 2; i < n; i++) {
    	if (A[i] >= max1) {
            // Case 1: 지금까지 본 숫자들보다 좋다면
            //         max2, max1 모두 갱신해줍니다.
            max2 = max1;
            max1 = A[i];
    	} 
        else if (A[i] > max2){
            // Case 2: max2보다만 좋다면 max2를 갱신합니다.
            max2 = A[i];
        }
    }
    
    // 출력:
    cout << max1 << " " << max2;
    return 0;
}

Complexity Analysis
Time Complexity : O(N)

Memory Complexity : O(N)


Intuition
정렬을 활용합니다.

Algorithm
주어진 배열을 내림차순으로 직접 정렬하면 첫 번째, 두 번째 위치에 있는 원소가 답이 됩니다.

# 변수 선언 및 입력
n = int(input())
arr = list(map(int, input().split()))

# 내림차순으로 정렬합니다.
arr.sort(reverse=True)

# 출력
print(arr[0], arr[1])


#include <iostream>
#include <algorithm>
#include <utility>

using namespace std;

int main() {
    // 변수 선언: 
    int A[100], n;

    // 입력:
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> A[i];
        
    // 내림차순으로 정렬합니다.
    sort(A, A+n, greater<int>()); 
    
    // 출력:
    cout << A[0] << " " << A[1];
    return 0;
}


Complexity Analysis
Time Complexity : O(NlgN)

Memory Complexity : O(N)






1. Solution1에서 다음과 같이 max2를 max1과 다른 값 중 최대를 찾는 식으로 하면 안되나요?

for(int i=0; i<n; i++) {
   if(A[i] != max1 && A[i] > max2) {
       max2 = A[i];
   }
}
다음과 같이 내림차순으로 정렬했을 때 첫 번째 원소와 두 번째 원소가 동일한 경우가 있기 때문에 위의 방식으로는 올바른 답을 구할 수 없습니다.

3
5 5 2
2. Solution1에서 max1이 뽑힌 자리인 a[max1Index]에 INT_MIN을 넣고 다시 최대를 뽑으면 되지 않나요?

A[max1index] = INT_MIN; 
for(int i=0; i<n; i++) {
   if(A[i] > max2) {
       max2 = A[i];
   }
}
INT_MIN 값이 입력으로 들어오는 숫자보다 항상 작다면 가능한 방법입니다. 하지만 입력으로 주어진 배열을 건드리게 되기 때문에 이 방법을 적용하기가 힘든 경우도 있어보입니다.

3. Solution2에서 max1, max2에 둘 다 A[0] 값을 넣고 A[1]부터 배열을 순회하면 왜 안될까요?

max1 = max2 = A[0];

// Step 2: 3번째 원소부터 보면서 max1과 max2를 갱신합니다.
for (int i = 1; i < n; i++) {
	...
}
다음과 같이 A[0]가 배열의 최댓값인 경우, 배열을 모두 순회해도 max1, max2의 값이 바뀌지 않게 되어 잘못된 답을 구하게 됩니다.

3
5 3 2