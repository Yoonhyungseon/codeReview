Intuition
각 줄마다 출력되는 공백의 개수와 별의 개수가 어떤 규칙을 갖는지를 이해해야 합니다.

한번에 규칙이 보이지 않을 경우, 몇 개의 부분으로 나눠 생각해볼 수 있습니다.

Algorithm
먼저 각 줄에 출력되는 별의 개수에 대한 규칙을 파악해보면 다음과 같습니다:

step 1) 1, 3, …, 2n-1, … 3.. 1과 같이 1부터 시작해서 2n-1까지 2씩 증가하며

step 2) 2n-1 이후로는 2씩 감소하게 됩니다.

다음으로는 별을 기준으로 각각 좌우에 생기는 공백의 개수는 다음과 같습니다:

공백의 개수 = (격자의 개수 - 별의 개수) / 2

step 1의 경우 i번째 줄에 별의 개수는 2i-1, 격자의 개수는 2n-1임으로 공백의 개수는 n - i 개가 됩니다.

따라서 각 줄에 대해 공백, 별, 공백 순으로 출력해주면 됩니다.

# 변수 선언 및 입력
n = int(input())

# Step 1:
for i in range(1, n + 1):
    for _ in range(n - i):
        print(" ", end="")
    for _ in range(2 * i - 1):
        print("*", end="")
    for _ in range(n - i):
        print(" ", end="")
    print()

# Step 2:
for i in range(n - 1, 0, -1):
    for _ in range(n - i):
        print(" ", end="")
    for _ in range(2 * i - 1):
        print("*", end="")
    for _ in range(n - i):
        print(" ", end="")
    print()


#include <iostream>

using namespace std;

int main()
{
    // 변수 선언 및 입력:
    int n;
    cin >> n;

    // Step 1:
    for(int i = 1; i <= n; i++)
    {
        for(int j = 0; j < n - i; j++)
        {
            cout << " ";
        }
        for(int j = 0; j < 2 * i - 1; j++)
        {
            cout << "*";
        }
        for(int j = 0; j < n - i; j++)
        {
            cout << " ";
        }
        printf("\n");
    }
    
    // Step 2:
    for(int i = n - 1; i >= 1; i--)
    {
        for(int j = 0; j < n - i; j++)
        {
            cout << " ";
        }
        for(int j = 0; j < 2 * i - 1; j++)
        {
            cout << "*";
        }
        for(int j = 0; j < n - i; j++)
        {
            cout << " ";
        }
        cout << endl;
    }

    return 0;
}

Complexity Analysis
Time Complexity : O(N^2)

Memory Complexity : O(1)