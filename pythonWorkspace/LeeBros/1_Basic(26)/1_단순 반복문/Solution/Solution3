Intuition
반복문과 나머지 연산자를 사용하여 주어진 범위 내의 각각의 숫자가 약수인지 확인하고 그 개수를 구합니다.

Algorithm
start부터 end까지의 정수를 순회하며 각 숫자의 약수 개수를 세줍니다.

step 1) 특정 숫자 n의 약수의 개수를 알아내기 위해 1부터 n까지의 숫자들로 해당 숫자를 나눠보며 나머지가 0인 수의 개수를 세줍니다.

case 1) 약수의 개수가 세 개이면 정답 개수를 1 증가 시켜줍니다.

# 변수 선언 및 입력:
start, end = tuple(map(int, input().split()))

ans = 0
for curr_num in range(start, end + 1):
    # Step 1:
    divisor_cnt = 0
    for divisor in range(1, curr_num + 1):
        if curr_num % divisor == 0:
            divisor_cnt += 1
    # Case 1:
    if divisor_cnt == 3:
        ans += 1

print(ans)



#include <iostream>

using namespace std;

int main() {
    int start, end;
    int answer_cnt = 0;
    cin >> start >> end;

    for(int curr_num = start; curr_num <= end; curr_num++) {
        // Step 1:
        int divisor_cnt = 0;
        for(int divisor = 1; divisor <= curr_num; divisor++){
            if(curr_num % divisor == 0){
                divisor_cnt++;
            }
        }
        // Case 1:
        if(divisor_cnt == 3){
            answer_cnt++;
        }
    }

    cout << answer_cnt;
    return 0;
}


Complexity Analysis
Time Complexity : O(N^2)

Memory Complexity : O(1)