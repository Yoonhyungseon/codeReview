Intuition
N번째 보고 말하는 수를 구하기 위해서는 N-1번째 보고 말하는 수가 필요합니다. 따라서 1번째 수 부터 시작하여 2번째 수, 3번째 수, ..., N-1번째 수, N번째 수를 구하는 방식으로 접근해야 합니다.

Algorithm
1번째 수열은 원소가 1 하나뿐인 수열입니다.

i번째 수열을 알고있다면, 다음 과정을 거쳐 i + 1번째 수열을 구할 수 있습니다.

i번째 수열에서 숫자를 순서대로 보면서, 인접한 곳에 다른 숫자가 나오는 순간에 지금까지 어떤 숫자가 몇 번 반복하여 나왔는지를 i + 1번째 수열에 기록해줍니다.
위의 과정을 i번째 수열의 원소들을 끝까지 다 볼때까지 반복합니다.
images/2021-02-16-04-30-51.png
위 과정에서 유의해야할 점은, 마지막 묶음 (위 그림에서 마지막 빨간 박스에 숫자 3이 들어있는 부분) 역시 i + 1번째 수열에 반영이 되어야 한다는 것입니다. 이런식의 복잡한 문제에서는 마지막 묶음을 놓치는 경우가 자주 있으니, 올바른 답이 나오지 않는 경우에는 마지막 묶음을 혹시 놓치지는 않았는지 꼭 확인이 필요합니다.

이 문제에서는 수열의 최대 원소의 개수를 R이라 했을 때 총 N개의 수열을 만들어야 하므로, 시간복잡도는 O(NR)이 됩니다.

# 변수 선언 및 입력:
n = int(input())

seq = [[] for _ in range(n + 1)]
	
# 첫 번째 수열에 첫 번째 원소는 1입니다.
seq[1].append(1)

# i번째 수열이 이미 완성되어 있을 때, i + 1번째 수열을 구합니다.
for i in range(1, n):
    contiguous_cnt = 1
    for j in range(1, len(seq[i]) + 1):
        # 끝에 다다랐거나 인접한 두 숫자가 다르다면
        # 방금 전까지의 묶음에 해당하는 정보를
        # i + 1 번째 수열에 추가해줍니다.
        if j == len(seq[i]) or seq[i][j] != seq[i][j - 1]:
            seq[i + 1].append(seq[i][j - 1])
            seq[i + 1].append(contiguous_cnt)
            contiguous_cnt = 1
        # 인접한 두 숫자가 같다면
        # 지금까지 연속하여 같은 숫자가 나온 횟수를 갱신합니다.
        else:
            contiguous_cnt += 1

# n번째 수열을 출력합니다.
for elem in seq[n]:
    print(elem, end='')


#include <iostream>
#include <vector>

#define MAX_N 20

using namespace std;

int main() {
	int n;
	vector<int> seq[MAX_N + 1];
	
	cin >> n;
	
    // 첫 번째 수열에 첫 번째 원소는 1입니다.
    seq[1].push_back(1);
	
    // i번째 수열이 이미 완성되어 있을 때, i + 1번째 수열을 구합니다.
	for(int i = 1; i < n; i++) {
		int contiguous_cnt = 1;
		for(int j = 1; j <= (int) seq[i].size(); j++) {
            // 끝에 다다랐거나 인접한 두 숫자가 다르다면
            // 방금 전까지의 묶음에 해당하는 정보를
            // i + 1 번째 수열에 추가해줍니다.
			if(j == (int) seq[i].size() || seq[i][j] != seq[i][j - 1]) {
				seq[i + 1].push_back(seq[i][j - 1]);
				seq[i + 1].push_back(contiguous_cnt);
				contiguous_cnt = 1;
			}
            // 인접한 두 숫자가 같다면
            // 지금까지 연속하여 같은 숫자가 나온 횟수를 갱신합니다.
            else
                contiguous_cnt++;
		}
	}
	
    // n번째 수열을 출력합니다.
	for(int j = 0; j < (int) seq[n].size(); j++)
		cout << seq[n][j];
	return 0;
}

Complexity Analysis
Time Complexity : O(NR)

Memory Complexity : O(NR)